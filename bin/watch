#!/bin/bash

WATCH_DIR="./"
WATCH_EXT="php/env"
RUN_CMD="php ./bin/mix start"
WATCH_LOG="./runtime/watch.log"
FS_WATCH="fswatch"
EXCLUDE_REGX="\.json|\.lock|.idea|.git|vendor|runtime"

if [[ $1 = "-h" || $1 = "help" ]];then
    echo -e "📚 Hyperf Watch Scripts Help guide"
    echo -e "Usage:  watch [path] [-] [options] [args]"
    echo -e "\twatch : The default monitoring directory path is {${WATCH_DIR}} without clearing the monitoring log"
    echo -e "\twatch -c : The default monitoring directory path is {${WATCH_DIR}} and clear the monitoring log"
    echo -e "\twatch -e xxx : The default listening directory path is {${WATCH_DIR}} and set the listening extension xxx"
    echo -e "\twatch -h : View help guide"
    echo -e "\twatch help: View help guide"
    echo -e "\twatch ./app : Set the listening directory path to {./app}"
    echo -e "\twatch ./app -c : Set the monitoring directory path to {./app} and clear the monitoring log"
    echo -e "\twatch ./app -e xxx -c: Set the monitoring directory path to {./app} and set the monitoring extension xxx and clear the monitoring log"
    exit 1
fi

# Check if fswatch is installed
command -v ${FS_WATCH} >/dev/null 2>&1 || { echo >&2 "[x] Please install fswatch first"; exit 1;}

# Whether to set up a listening directory
if [[ $1 != "" && $1 != "-c" && $1 != "-e" && $1 != "-r" ]];then
    WATCH_DIR=$1
    if [[ ! -d ${WATCH_DIR} ]];then
        echo "[x] Please confirm that the directory {$WATCH_DIR} exists and has access permissions"
        exit 1
    fi
fi

# Whether to set the listening extension
if [[ $* =~ "-e" ]];then
    ARGS=${*##*-c}
    ARGS=${ARGS#*-e}
    WATCH_EXT=${ARGS// /}
    if [[ ${WATCH_EXT} = "" ]]; then
        echo "[x] Please set the listening extension, multiple use / separated"
        exit 1
    fi
fi

echo -e "🐵 Loading Hyperf Watch Scripts"
echo -e "👉 Watching Dir @ {${WATCH_DIR}}"
echo -e "👉 Watching File Extension @ {${WATCH_EXT}}"
echo -e "👉 Watching Log File @ {${WATCH_LOG}}"
echo -e "👉 Running Command {${RUN_CMD}}"

# Do you need to clean up the monitor log
if [[ $* =~ "-c" ]];then
    # Determine whether the directory exists
    if [[ ! -d ${WATCH_LOG%/*} ]];then
        mkdir ${WATCH_LOG%/*}
    fi
    if [[ -f ${WATCH_LOG} ]];then
        rm -rf ${WATCH_LOG}
    fi
    echo -e "👉 Clean Watch Log Success"
fi

# End the started process
PID=`ps -ef | grep "${RUN_CMD}" | grep -v grep | awk '{print $2}'`
if [[ ${PID} != "" ]];then
    kill -9 ${PID}
fi

START="🚀 Start @ $(date "+%Y-%m-%d %H:%M:%S")"
echo -e ${START}
echo -e "\n ====================== \n ${START}\n ====================== \n" >> ${WATCH_LOG}

# Run in the background and save the output to the monitoring log path
nohup ${RUN_CMD} >> ${WATCH_LOG} 2>&1 &

# Start listening
${FS_WATCH} -Ee ${EXCLUDE_REGX} --event IsFile ${WATCH_DIR} | while read file
do
    # If it matches the listening extension
    if [[ ${WATCH_EXT} =~ ${file##*.} ]];then
        # Restart process
        ps -ef | grep "${RUN_CMD}" | grep -v grep | awk '{print $2}' | xargs kill
        RESTART="🔄 Restart @ $(date "+%Y-%m-%d %H:%M:%S")"
        echo -e "\n ====================== \n ${RESTART}\n 👉 $file was modified.\n ====================== \n" >> ${WATCH_LOG}
        nohup ${RUN_CMD} >> ${WATCH_LOG} 2>&1 &
        echo ${RESTART}
    fi
done

# Exit and kill all startup processes
ps -ef | grep "${RUN_CMD}" | grep -v grep | awk '{print $2}' | xargs kill

# Mount monitoring log
cat ${WATCH_LOG}